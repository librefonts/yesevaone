[
  {
    "failure": [
      {
        "autofix": false, 
        "methodName": "test_description_is_more_than_500b", 
        "name": "bakery_lint.tests.metadata_test", 
        "tags": [
          "note"
        ], 
        "tool": "METADATA.json", 
        "err_msg": "DESCRIPTION.en_us.html must have size larger than 500 bytes", 
        "methodDoc": "DESCRIPTION.en_us.html is more than 500 bytes", 
        "targets": [
          "metadata"
        ]
      }, 
      {
        "autofix": false, 
        "methodName": "test_description_is_valid_html", 
        "name": "bakery_lint.tests.metadata_test", 
        "tags": [
          "note"
        ], 
        "tool": "METADATA.json", 
        "err_msg": "DESCRIPTION.en_us.html is not real html file", 
        "methodDoc": "DESCRIPTION.en_us.html is not real html file", 
        "targets": [
          "metadata"
        ]
      }, 
      {
        "autofix": false, 
        "methodName": "test_does_not_familyName_exist_in_daltonmaag_catalogue", 
        "name": "bakery_lint.tests.metadata_test", 
        "tags": [
          "note"
        ], 
        "tool": "METADATA.json", 
        "err_msg": "False is not true", 
        "methodDoc": "DALTONMAAG.com", 
        "targets": [
          "metadata"
        ]
      }, 
      {
        "autofix": false, 
        "methodName": "test_does_not_familyName_exist_in_fontshop_catalogue", 
        "name": "bakery_lint.tests.metadata_test", 
        "tags": [
          "note"
        ], 
        "tool": "METADATA.json", 
        "err_msg": "False is not true", 
        "methodDoc": "FONTSHOP.com", 
        "targets": [
          "metadata"
        ]
      }, 
      {
        "autofix": false, 
        "methodName": "test_does_not_familyName_exist_in_fontsmith_catalogue", 
        "name": "bakery_lint.tests.metadata_test", 
        "tags": [
          "note"
        ], 
        "tool": "METADATA.json", 
        "err_msg": "False is not true", 
        "methodDoc": "FONTSMITH.com", 
        "targets": [
          "metadata"
        ]
      }, 
      {
        "autofix": false, 
        "methodName": "test_metadata_has_unique_style_weight_pairs", 
        "name": "bakery_lint.tests.metadata_test", 
        "tags": [
          "required"
        ], 
        "tool": "METADATA.json", 
        "err_msg": "u'normal:400' unexpectedly found in [u'normal:400']", 
        "methodDoc": "METADATA.json only contains unique style:weight pairs", 
        "targets": [
          "metadata"
        ]
      }, 
      {
        "autofix": false, 
        "methodName": "test_font_on_disk_family_equal_in_metadata_json", 
        "name": "bakery_lint.tests.downstream.test_metadata_agreements", 
        "tags": [
          "required"
        ], 
        "tool": "lint", 
        "err_msg": "Unmatched family name are in fonts: Yeseva-One.ttf", 
        "methodDoc": "Font on disk and in METADATA.json have the same family name", 
        "targets": [
          "metadata"
        ]
      }, 
      {
        "autofix": false, 
        "methodName": "test_font_name_matches_family", 
        "name": "bakery_lint.tests.downstream.test_metadata_agreements", 
        "tags": [
          "note"
        ], 
        "tool": "lint", 
        "err_msg": "\"fonts.name\" property is not the same as TTF familyname", 
        "methodDoc": "METADATA.json fonts 'name' property should be same as font familyname", 
        "targets": [
          "metadata"
        ]
      }, 
      {
        "autofix": false, 
        "methodName": "test_postscriptname_contains_correct_weight", 
        "name": "bakery_lint.tests.downstream.test_check_canonical_weights", 
        "tags": [
          "note"
        ], 
        "tool": "lint", 
        "err_msg": "postScriptName with weight 400 must be ended with \"Regular\" or \"Italic\"", 
        "methodDoc": "Metadata weight matches postScriptName", 
        "targets": "metadata"
      }, 
      {
        "autofix": false, 
        "methodName": "test_check_metadata_matches_nametable", 
        "name": "bakery_lint.tests.downstream.test_check_metadata_matches_nametable", 
        "tags": [
          "note"
        ], 
        "tool": "lint", 
        "err_msg": "YesevaOne: Family name was supposed to be \"Yeseva One\" but is \"YesevaOne\"", 
        "methodDoc": "Metadata key-value match to table name fields", 
        "targets": [
          "metadata"
        ]
      }, 
      {
        "autofix": false, 
        "methodName": "test_fontname_not_in_camel_case", 
        "name": "bakery_lint.tests.downstream.test_check_font_name_not_in_camelcase", 
        "tags": [
          "note"
        ], 
        "tool": "lint", 
        "err_msg": "%s are camel cased names. To solve this check just use spaces in names.", 
        "methodDoc": "Check if fontname is not camel cased", 
        "targets": [
          "metadata"
        ]
      }, 
      {
        "autofix": false, 
        "methodName": "test_check_canonical_filenames", 
        "name": "bakery_lint.tests.downstream.test_check_canonical_filenames", 
        "tags": [
          "required"
        ], 
        "tool": "Lint", 
        "err_msg": "u'YesevaOne-Regular.ttf' != u'Yeseva-One.ttf'\n- YesevaOne-Regular.ttf\n?          --------\n+ Yeseva-One.ttf\n?       +\n", 
        "methodDoc": "Test If filename is canonical", 
        "targets": [
          "metadata"
        ]
      }, 
      {
        "autofix": false, 
        "methodName": "test_check_familyname_matches_fontnames", 
        "name": "bakery_lint.tests.downstream.test_check_familyname_matches_fontnames", 
        "tags": [
          "note"
        ], 
        "tool": "lint", 
        "err_msg": "YesevaOne-Regular.ttf: Family name \"Yeseva One\" does not match font name: \"YesevaOne\"", 
        "methodDoc": "Check font name is the same as family name", 
        "targets": [
          "metadata"
        ]
      }, 
      {
        "autofix": false, 
        "methodName": "test_the_same_names_of_glyphs_across_family", 
        "name": "bakery_lint.tests.downstream.test_check_glyph_consistency", 
        "tags": [
          "note"
        ], 
        "tool": "lint", 
        "err_msg": "Family has a different glyphs's names in fonts", 
        "methodDoc": "The same names of glyphs across family?", 
        "targets": [
          "metadata"
        ]
      }, 
      {
        "autofix": false, 
        "methodName": "test_the_same_number_of_glyphs_across_family", 
        "name": "bakery_lint.tests.downstream.test_check_glyph_consistency", 
        "tags": [
          "note"
        ], 
        "tool": "lint", 
        "err_msg": "Family has a different glyphs's count in fonts", 
        "methodDoc": "The same number of glyphs across family?", 
        "targets": [
          "metadata"
        ]
      }, 
      {
        "autofix": false, 
        "methodName": "test_copyright_contains_correct_rfn", 
        "name": "bakery_lint.tests.downstream.test_metadata_font_copyright", 
        "tags": [
          "required", 
          "info"
        ], 
        "tool": "lint", 
        "err_msg": "\"Copyright (c) 2011-2012 by Jovanny Lemonad. All rights reserved.\" should have \"Reserved File Name\"", 
        "methodDoc": "Copyright string contains \"Reserved File Name\"", 
        "targets": "metadata"
      }, 
      {
        "autofix": false, 
        "methodName": "test_copyright_matches_pattern", 
        "name": "bakery_lint.tests.downstream.test_metadata_font_copyright", 
        "tags": [
          "required"
        ], 
        "tool": "lint", 
        "err_msg": "Regexp didn't match: 'Copyright\\\\s+\\\\(c\\\\)\\\\s+20\\\\d{2}.*\\\\(.*@.*.*\\\\)' not found in u'Copyright (c) 2011-2012 by Jovanny Lemonad. All rights reserved.'", 
        "methodDoc": "Copyright string matches to Copyright * 20\\d\\d * (*@*.*)", 
        "targets": "metadata"
      }, 
      {
        "autofix": false, 
        "methodName": "test_copyrighttxt_exists", 
        "name": "bakery_lint.tests.downstream.test_check_text_files_exist", 
        "tags": [
          "required"
        ], 
        "tool": "lint", 
        "err_msg": "['COPYRIGHT.txt'] does not exist in project", 
        "methodDoc": "Font folder should contains COPYRIGHT.txt", 
        "targets": [
          "metadata"
        ]
      }, 
      {
        "autofix": false, 
        "methodName": "test_fontlogtxt_exists", 
        "name": "bakery_lint.tests.downstream.test_check_text_files_exist", 
        "tags": [
          "note"
        ], 
        "tool": "lint", 
        "err_msg": "['FONTLOG.txt'] does not exist in project", 
        "methodDoc": "Font folder should contains FONTLOG.txt", 
        "targets": [
          "metadata"
        ]
      }
    ], 
    "name": "METADATA.json", 
    "passed": false, 
    "error": [], 
    "fixed": [], 
    "success": [
      {
        "autofix": false, 
        "methodName": "test_charset_latin", 
        "name": "bakery_lint.tests.metadata_test", 
        "tags": [
          "required"
        ], 
        "tool": "METADATA.json", 
        "err_msg": "", 
        "methodDoc": "Yeseva-One.latin is real TrueType file", 
        "targets": [
          "metadata"
        ]
      }, 
      {
        "autofix": false, 
        "methodName": "test_charset_menu", 
        "name": "bakery_lint.tests.metadata_test", 
        "tags": [
          "required"
        ], 
        "tool": "METADATA.json", 
        "err_msg": "", 
        "methodDoc": "Yeseva-One.menu is real TrueType file", 
        "targets": [
          "metadata"
        ]
      }, 
      {
        "autofix": false, 
        "methodName": "test_does_not_familyName_exist_in_fontbureau_catalogue", 
        "name": "bakery_lint.tests.metadata_test", 
        "tags": [
          "note"
        ], 
        "tool": "METADATA.json", 
        "err_msg": "", 
        "methodDoc": "FONTBUREAU.com", 
        "targets": [
          "metadata"
        ]
      }, 
      {
        "autofix": false, 
        "methodName": "test_does_not_familyName_exist_in_fontscom_catalogue", 
        "name": "bakery_lint.tests.metadata_test", 
        "tags": [
          "note"
        ], 
        "tool": "METADATA.json", 
        "err_msg": "", 
        "methodDoc": "FONTS.com", 
        "targets": [
          "metadata"
        ]
      }, 
      {
        "autofix": false, 
        "methodName": "test_does_not_familyName_exist_in_houseind_catalogue", 
        "name": "bakery_lint.tests.metadata_test", 
        "tags": [
          "note"
        ], 
        "tool": "METADATA.json", 
        "err_msg": "", 
        "methodDoc": "HOUSEIND.com", 
        "targets": [
          "metadata"
        ]
      }, 
      {
        "autofix": false, 
        "methodName": "test_does_not_familyName_exist_in_myfonts_catalogue", 
        "name": "bakery_lint.tests.metadata_test", 
        "tags": [
          "note"
        ], 
        "tool": "METADATA.json", 
        "err_msg": "", 
        "methodDoc": "MYFONTS.com", 
        "targets": [
          "metadata"
        ]
      }, 
      {
        "autofix": false, 
        "methodName": "test_does_not_familyName_exist_in_veer_catalogue", 
        "name": "bakery_lint.tests.metadata_test", 
        "tags": [
          "note"
        ], 
        "tool": "METADATA.json", 
        "err_msg": "", 
        "methodDoc": "VEER.com", 
        "targets": [
          "metadata"
        ]
      }, 
      {
        "autofix": false, 
        "methodName": "test_family_is_listed_in_gwf", 
        "name": "bakery_lint.tests.metadata_test", 
        "tags": [
          "note"
        ], 
        "tool": "METADATA.json", 
        "err_msg": "", 
        "methodDoc": "Fontfamily is listed in Google Font Directory", 
        "targets": [
          "metadata"
        ]
      }, 
      {
        "autofix": false, 
        "methodName": "test_metadata_atleast_latin_menu_subsets_exist", 
        "name": "bakery_lint.tests.metadata_test", 
        "tags": [
          "required"
        ], 
        "tool": "METADATA.json", 
        "err_msg": "", 
        "methodDoc": "METADATA.json subsets should have at least 'menu' and 'latin'", 
        "targets": [
          "metadata"
        ]
      }, 
      {
        "autofix": false, 
        "methodName": "test_metadata_designer_exists_in_profiles_csv", 
        "name": "bakery_lint.tests.metadata_test", 
        "tags": [
          "required"
        ], 
        "tool": "METADATA.json", 
        "err_msg": "", 
        "methodDoc": "Designer exists in GWF profiles.csv", 
        "targets": [
          "metadata"
        ]
      }, 
      {
        "autofix": false, 
        "methodName": "test_metadata_fonts_items_dicts", 
        "name": "bakery_lint.tests.metadata_test", 
        "tags": [
          "required"
        ], 
        "tool": "METADATA.json", 
        "err_msg": "", 
        "methodDoc": "METADATA.json fonts key items are dicts", 
        "targets": [
          "metadata"
        ]
      }, 
      {
        "autofix": false, 
        "methodName": "test_metadata_fonts_key_list", 
        "name": "bakery_lint.tests.metadata_test", 
        "tags": [
          "required"
        ], 
        "tool": "METADATA.json", 
        "err_msg": "", 
        "methodDoc": "METADATA.json font key should be list", 
        "targets": [
          "metadata"
        ]
      }, 
      {
        "autofix": false, 
        "methodName": "test_metadata_fonts_no_dupes", 
        "name": "bakery_lint.tests.metadata_test", 
        "tags": [
          "note"
        ], 
        "tool": "METADATA.json", 
        "err_msg": "", 
        "methodDoc": "METADATA.json fonts propery only should have uniq values", 
        "targets": [
          "metadata"
        ]
      }, 
      {
        "autofix": false, 
        "methodName": "test_metadata_keys", 
        "name": "bakery_lint.tests.metadata_test", 
        "tags": [
          "required"
        ], 
        "tool": "METADATA.json", 
        "err_msg": "", 
        "methodDoc": "METADATA.json should have top keys: [\"name\", \"designer\", \"license\", \"visibility\", \"category\", \"size\", \"dateAdded\", \"fonts\", \"subsets\"]", 
        "targets": [
          "metadata"
        ]
      }, 
      {
        "autofix": false, 
        "methodName": "test_metadata_license", 
        "name": "bakery_lint.tests.metadata_test", 
        "tags": [
          "required"
        ], 
        "tool": "METADATA.json", 
        "err_msg": "", 
        "methodDoc": "METADATA.json license is 'Apache2', 'UFL' or 'OFL'", 
        "targets": [
          "metadata"
        ]
      }, 
      {
        "autofix": false, 
        "methodName": "test_metadata_no_unknown_top_keys", 
        "name": "bakery_lint.tests.metadata_test", 
        "tags": [
          "required"
        ], 
        "tool": "METADATA.json", 
        "err_msg": "", 
        "methodDoc": "METADATA.json don't have unknown top keys", 
        "targets": [
          "metadata"
        ]
      }, 
      {
        "autofix": false, 
        "methodName": "test_metadata_subsets_key_list", 
        "name": "bakery_lint.tests.metadata_test", 
        "tags": [
          "required"
        ], 
        "tool": "METADATA.json", 
        "err_msg": "", 
        "methodDoc": "METADATA.json subsets key should be list", 
        "targets": [
          "metadata"
        ]
      }, 
      {
        "autofix": false, 
        "methodName": "test_metadata_top_keys_types", 
        "name": "bakery_lint.tests.metadata_test", 
        "tags": [
          "required"
        ], 
        "tool": "METADATA.json", 
        "err_msg": "", 
        "methodDoc": "METADATA.json should have proper top keys types", 
        "targets": [
          "metadata"
        ]
      }, 
      {
        "autofix": false, 
        "methodName": "test_check_subsets_exists", 
        "name": "bakery_lint.tests.downstream.test_check_subsets_exists", 
        "tags": [
          "note"
        ], 
        "tool": "lint", 
        "err_msg": "", 
        "methodDoc": "Check that corresponding subset files exist for fonts", 
        "targets": [
          "metadata"
        ]
      }, 
      {
        "autofix": false, 
        "methodName": "test_postscriptname_in_metadata_equal_to_font_on_disk", 
        "name": "bakery_lint.tests.downstream.test_metadata_agreements", 
        "tags": [
          "required"
        ], 
        "tool": "lint", 
        "err_msg": "", 
        "methodDoc": "Checks METADATA.json 'postScriptName' matches TTF 'postScriptName'", 
        "targets": [
          "metadata"
        ]
      }, 
      {
        "autofix": false, 
        "methodName": "test_metadata_family_values_are_all_the_same", 
        "name": "bakery_lint.tests.downstream.test_metadata_agreements", 
        "tags": [
          "note"
        ], 
        "tool": "lint", 
        "err_msg": "", 
        "methodDoc": "Check that METADATA family values are all the same", 
        "targets": [
          "metadata"
        ]
      }, 
      {
        "autofix": false, 
        "methodName": "test_metadata_filename_matches_postscriptname", 
        "name": "bakery_lint.tests.downstream.test_metadata_agreements", 
        "tags": [
          "required"
        ], 
        "tool": "lint", 
        "err_msg": "", 
        "methodDoc": "METADATA.json `filename` matches `postScriptName`", 
        "targets": [
          "metadata"
        ]
      }, 
      {
        "autofix": false, 
        "methodName": "test_metadata_font_have_regular", 
        "name": "bakery_lint.tests.downstream.test_metadata_agreements", 
        "tags": [
          "note"
        ], 
        "tool": "lint", 
        "err_msg": "", 
        "methodDoc": "According GWF standarts font should have Regular style.", 
        "targets": [
          "metadata"
        ]
      }, 
      {
        "autofix": false, 
        "methodName": "test_metadata_fonts_fields_have_fontname", 
        "name": "bakery_lint.tests.downstream.test_metadata_agreements", 
        "tags": [
          "note"
        ], 
        "tool": "lint", 
        "err_msg": "", 
        "methodDoc": "METADATA.json fonts items fields \"name\", \"postScriptName\", \"fullName\", \"filename\" contains font name right format", 
        "targets": [
          "metadata"
        ]
      }, 
      {
        "autofix": false, 
        "methodName": "test_metadata_fullname_is_equal_to_internal_font_fullname", 
        "name": "bakery_lint.tests.downstream.test_metadata_agreements", 
        "tags": [
          "note"
        ], 
        "tool": "lint", 
        "err_msg": "", 
        "methodDoc": "METADATA.json 'fullname' value matches internal 'fullname'", 
        "targets": [
          "metadata"
        ]
      }, 
      {
        "autofix": false, 
        "methodName": "test_metadata_fullname_matches_postScriptName", 
        "name": "bakery_lint.tests.downstream.test_metadata_agreements", 
        "tags": [
          "required"
        ], 
        "tool": "lint", 
        "err_msg": "", 
        "methodDoc": "METADATA.json `fullName` matches `postScriptName`", 
        "targets": [
          "metadata"
        ]
      }, 
      {
        "autofix": false, 
        "methodName": "test_metadata_regular_is_400", 
        "name": "bakery_lint.tests.downstream.test_metadata_agreements", 
        "tags": [
          "required"
        ], 
        "tool": "lint", 
        "err_msg": "", 
        "methodDoc": "Regular should be 400", 
        "targets": [
          "metadata"
        ]
      }, 
      {
        "autofix": false, 
        "methodName": "test_metadata_regular_is_normal", 
        "name": "bakery_lint.tests.downstream.test_metadata_agreements", 
        "tags": [
          "note"
        ], 
        "tool": "lint", 
        "err_msg": "", 
        "methodDoc": "Usually Regular should be normal style", 
        "targets": [
          "metadata"
        ]
      }, 
      {
        "autofix": false, 
        "methodName": "test_check_monospace_agreement", 
        "name": "bakery_lint.tests.downstream.test_check_monospace_agreements", 
        "tags": [
          "note"
        ], 
        "tool": "lint", 
        "err_msg": "", 
        "methodDoc": "Monospace font has hhea.advanceWidthMax equal to each glyph advanceWidth", 
        "targets": [
          "metadata"
        ]
      }, 
      {
        "autofix": false, 
        "methodName": "test_check_canonical_weights", 
        "name": "bakery_lint.tests.downstream.test_check_canonical_weights", 
        "tags": [
          "note"
        ], 
        "tool": "lint", 
        "err_msg": "", 
        "methodDoc": "Check that weights have canonical value", 
        "targets": "metadata"
      }, 
      {
        "autofix": false, 
        "methodName": "test_font_weight_same_as_in_metadata", 
        "name": "bakery_lint.tests.downstream.test_check_canonical_weights", 
        "tags": [
          "note"
        ], 
        "tool": "lint", 
        "err_msg": "", 
        "methodDoc": "Font weight matches metadata.json value of key \"weight\"", 
        "targets": "metadata"
      }, 
      {
        "autofix": false, 
        "methodName": "test_metadata_contains_current_font", 
        "name": "bakery_lint.tests.downstream.test_check_canonical_weights", 
        "tags": [
          "note"
        ], 
        "tool": "lint", 
        "err_msg": "", 
        "methodDoc": "METADATA.json should contains testing font, under canonic name", 
        "targets": "metadata"
      }, 
      {
        "autofix": false, 
        "methodName": "test_menu_file_agreement", 
        "name": "bakery_lint.tests.downstream.test_check_files_menu_agreements", 
        "tags": [
          "required"
        ], 
        "tool": "lint", 
        "err_msg": "", 
        "methodDoc": "Check fonts have corresponding menu files", 
        "targets": [
          "metadata"
        ]
      }, 
      {
        "autofix": false, 
        "methodName": "test_check_canonical_styles", 
        "name": "bakery_lint.tests.downstream.test_check_canonical_styles", 
        "tags": [
          "note"
        ], 
        "tool": "lint", 
        "err_msg": "", 
        "methodDoc": "Test If font styles are canonical", 
        "targets": [
          "metadata"
        ]
      }, 
      {
        "autofix": false, 
        "methodName": "test_check_metadata_fields", 
        "name": "bakery_lint.tests.downstream.test_check_metadata_fields", 
        "tags": [
          "required"
        ], 
        "tool": "lint", 
        "err_msg": "", 
        "methodDoc": "Check METADATA.json \"fonts\" property items have required field", 
        "targets": [
          "metadata"
        ]
      }, 
      {
        "autofix": false, 
        "methodName": "test_the_same_encodings_of_glyphs_across_family", 
        "name": "bakery_lint.tests.downstream.test_check_glyph_consistency", 
        "tags": [
          "note"
        ], 
        "tool": "lint", 
        "err_msg": "", 
        "methodDoc": "The same unicode encodings of glyphs across family?", 
        "targets": [
          "metadata"
        ]
      }, 
      {
        "autofix": false, 
        "methodName": "test_check_italic_style_matches_names", 
        "name": "bakery_lint.tests.downstream.test_check_metadata_style_matches_names", 
        "tags": [
          "note"
        ], 
        "tool": "lint", 
        "err_msg": "", 
        "methodDoc": "Check metadata.json font.style `italic` matches font internal", 
        "targets": [
          "metadata"
        ]
      }, 
      {
        "autofix": false, 
        "methodName": "test_check_normal_style_matches_names", 
        "name": "bakery_lint.tests.downstream.test_check_metadata_style_matches_names", 
        "tags": [
          "note"
        ], 
        "tool": "lint", 
        "err_msg": "", 
        "methodDoc": "Check metadata.json font.style `italic` matches font internal", 
        "targets": [
          "metadata"
        ]
      }, 
      {
        "autofix": false, 
        "methodName": "test_check_menu_contains_proper_glyphs", 
        "name": "bakery_lint.tests.downstream.test_check_menu_contains_proper_glyphs", 
        "tags": [
          "note"
        ], 
        "tool": "lint", 
        "err_msg": "", 
        "methodDoc": "Check menu file contains proper glyphs", 
        "targets": [
          "metadata"
        ]
      }, 
      {
        "autofix": false, 
        "methodName": "test_copyright_is_consistent_across_family", 
        "name": "bakery_lint.tests.downstream.test_metadata_font_copyright", 
        "tags": [
          "required"
        ], 
        "tool": "lint", 
        "err_msg": "", 
        "methodDoc": "METADATA.json fonts copyright string is the same for all items", 
        "targets": "metadata"
      }, 
      {
        "autofix": false, 
        "methodName": "test_metadata_copyright_size", 
        "name": "bakery_lint.tests.downstream.test_metadata_font_copyright", 
        "tags": [
          "required"
        ], 
        "tool": "lint", 
        "err_msg": "", 
        "methodDoc": "Copyright string should be less than 500 chars", 
        "targets": "metadata"
      }, 
      {
        "autofix": false, 
        "methodName": "test_description_exists", 
        "name": "bakery_lint.tests.downstream.test_check_text_files_exist", 
        "tags": [
          "required"
        ], 
        "tool": "lint", 
        "err_msg": "", 
        "methodDoc": "Font folder should contains DESCRIPTION.en_us.html", 
        "targets": [
          "metadata"
        ]
      }, 
      {
        "autofix": false, 
        "methodName": "test_licensetxt_exists", 
        "name": "bakery_lint.tests.downstream.test_check_text_files_exist", 
        "tags": [
          "required"
        ], 
        "tool": "lint", 
        "err_msg": "", 
        "methodDoc": "Font folder should contains LICENSE.txt", 
        "targets": [
          "metadata"
        ]
      }
    ]
  }
]